#i2c  address: 0x3C input oled
sensor:
  - platform: uptime
    id: wt32_uptime_seconds
    update_interval: 60s
    entity_category: diagnostic
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: wt32_uptime
            state: !lambda |-
              int seconds = round(id(wt32_uptime_seconds).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (to_string(minutes) + "m")
              ).c_str();

text_sensor:
  - platform: template
    name: Uptime
    id: wt32_uptime
    entity_category: diagnostic
    icon: mdi:clock-start
  - platform: template
    name: 'IP Address'
    id: ip_address
    entity_category: diagnostic
    icon: 'mdi:ip-network'
    lambda: |-
      return id(eth).get_ip_addresses().empty() ? "Unset" : id(eth).get_ip_addresses()[0].str();
    update_interval: 60s

script:
  - id: screensaver_script
    # screensaver script, turn on screensaver after 30 seconds, restart counter each time when invoked
    mode: restart
    then:
      # set the time after which the screensaver will be activated
      - delay: 30s
      - display.page.show: screensaver
      - component.update: oled_display

esphome:
  on_boot:
    priority: 0
    then:
      - display.page.show: first_page
      - component.update: ip_address
      - component.update: oled_display
      - script.execute: screensaver_script


font:
  - file: 'gfonts://Ubuntu'
    glyphsets: [
      'GF_Latin_Core'
    ]
    id: size_10
    size: 10
